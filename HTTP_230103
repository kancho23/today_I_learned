목표1. 상태유지와 무상태유지 개념에 대해서 이해한다.
목표2. HTTP 코드 구조에 대해서 이해한다
목표3. URI와 웹브라우저 요청 흐름에 대해 이해한다.
과정1. 무작정 API URI를 설계해본다.
과정2. 리팩토링을 진행한다.

IP가 아파트면, PORT는 몇 동 몇 호라 생각하면된다.
0~1023은 잘 알려진 포트로 사용하지 않는 것이 좋다.

IP는 기억하기 어렵고, 변경될 수 있다.
이 때문에 중간에 전화번호부처럼 DNS를 사용할 수 있다.
우리가 익히 알고있는 도메인 명 google.com을 생각하면 된다.


URI는 resouce를 식별하는 통합된 방법이다. (URI = URL + URN)
URI는 locator, name 또는 둘 다 추가로 분류될 수 있다.
ex) https://www.google.com:443/search?q=hello&hl=ko

이렇게 요청이 들어가면,
www.google.com 이라는 도메인 명을 통해(DNS 이용), IP:200.200.200.2가 요청된다.
조금 더 자세히 설명하면,
출발지 IP랑 PORT가 담기고, 'GET /search?q=hello&hl=ko HTTTP/1.1 Host:www.google.com'이라는 HTTP 메세지가 담긴
'socket' 형태가 웹 브라우저에서 날라간다.

이것을 '구글 서버'에서 받고, 잘 받으면 웹 브라우저로 '응답 HTTP'를 보낸다.
이를 웹 브라우저에서는 HTML 렌더링을 통해 화면에 나타낸다.



목표1. HTTP에 대해 이해한다.

HyperText Transfer Protocol(HTTP), 최근에는 모든 형태의 데이터를 HTTP를 통해 전송한다.
HTTP/1.1 : 가장 많이 사용해서, 우리에게 중요한 버전이다.
HTTP/1.1과 HTTP/2는 TCP를 기반으로 동작하고, HTTP/3는 UDP 프로토콜 위에서 동작한다.

목표2. HTTP의 특징에 대해 알아보자.

HTTP는 클라이언트-서버 구조이다. 클라이언트는 요청을 보낸다. 서버는 요청에 대한 결과를 응답한다.
HTTP는 무상태 프로토콜(stateless)을 지향한다. 서버가 클라이언트의 상태를 보존하지 않는다.
*서버가 필요한 데이터를 '모두', '그때마다' 넣어준다. 무한히 서버를 증설 가능하다.
*단, 로그인 했다는 상태, 브라우저 쿠키 등은 상태유지 형태로 설계해야한다. (상태유지는 최소한으로)
HTTP는 비연결성 모델이다. 일반적으로 초 단위 이하의 빠른 속도로 응답. 서버 자원 효율적 이용가능
*단, TCP/IP 연결을 새로 맺어야해서 3 way handshake 시간이 추가된다.

목표3. HTTP 메세지에 대해 알아보자.
시작라인 - 헤더 - 공백라인(CRLF) - 메세지 바디

목표4. HTTP 메서드에 대해 알아보자.
과정1. HTTP API를 설계해보자. API URI를 만들자.
API URI의 핵심은 '리소스를 식별'하는 것이다. '수정하다' 가 아닌 '회원정보'가 리소스이다.
URI는 '리소스만 식별'하고 '수정하다'라는 행위는 'HTTP 메서드'이다.

과정2. HTTP 메서드 중 GET, POST를 이해하자.
GET은 리소스를 조회하는 것이고, POST는 요청 데이터를 처리(주로 등록)한다.
GET, 서버에 전달하고 싶은 데이터는 쿼리 파라미터로 전달한다. (key-value 형태)
POST, 메세지 바디를 통해 서버로 요청 데이터를 전달한다.
*POST는 새 리소소를 생성하는 것에도 쓰이지만, 프로세스 처리(결제완료 -> 배달시작)에도 사용된다

과정3. HTTP 메서드 중 PUT, PATCH, DELETE를 이해하자.
PUT은 리소스를 대체하는 것이고(덮어쓰기), PATCH는 리소스를 부분 변경하는 것이고(기존 데이터 일부 살리고 싶으면), DELETE는 리소스 제거 
PUT은 클라이언트가 리소스 위치를 알고 있어야한다! 덮어쓰게 되면, '기존 데이터는' 완전히 다 날라감

과정4. HTTP 메서드의 속성을 알아보자.
안전 : 호출해도 리소스를 변경하지 않는다, 계속 호출해도 문제 없다(즉, 조회 기능만 포함됨)
멱등 : 한 번 호출하든, 두 번 호출하든 결과가 똑같다(GET, PUT, DELETE)
캐시가능 : 응답 결과 리소스를 캐시해서 사용해도 되는가(GET, HEAD, POST, PATCH)

