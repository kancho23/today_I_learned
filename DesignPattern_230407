Design Pattern
-재사용이 가능하고, 변화에 유연하게 대처하는 아키텍쳐 생성가능
-특정 상황에서의 유지보수

ex) 커피숍의 주문 시스템 제작 의뢰
1. Decorator Pattern : 특정 객체에 쉽게 접근 가능
                       Size-Up, 휘핑크림 추가 같은 옵션 넣어줌
2. Observer Pattern : 주문이 완료되면, 바리스타 쪽으로 주문 정보 보냄
3. Facade Pattern : 이런 모듈들을 쉽게 이용 가능

*Abstract Class(추상 클래스) VS Interface(인터페이스)
인터페이스 : 추상함수만 가능, 구체적인 구현 불가
추상클래스 : 추상함수 + 구체적인 구현 가능
둘 다 추상함수를 정의하기 위한 용도이다. 따라서, 객체 직접 생성 불가능

*Concrete Class(구체 클래스)
추상함수를 하나도 가지지 않는 클래스. 따라서, 객체 생성 가능

*Coupling(커플링)
소프트웨어 모듈들이 서로 의존하는 정도
-------------------------------class구현 어떻게 되어있을지 예상해서 짜보기)-------------------------------

*Encapsulation(캡슐화)
Class 요소에 대한 외부 접근권한을 최소로 해서, 코드의 유지보수성 향상
1. private(=default) : 자기 자신 클래스 에서만 접근 가능, 자식클래스 X, 해당 클래스 객체 X 
-------------------------------(<- 자기자신 객체?, 자식클래스 객체?)-------------------------------
2. protected : 자기 자신 클래스, 자식클래스 접근 가능, 해당 클래스 객체 X
3. public : 자기 자신 클래스, 자식클래스, 해당 클래스 객체 모두 접근 가능

*Polymorphism(다형성)
여러가지 형태로 변형할 수 있는 특성. 하나의 객체가 여러가지 형태를 가질 수 있음
=> 하나의 모듈로 여러가지 종류의 객체를 받고, 받은 객체의 종류에 따라 다르게 동작
1. 객체로서의 다형성-------------------------------
2. 메서드로서의 다형성(입력변수 다르면, 다르게 인식)
------------------------------- static void Shoot(Person person, Gun gun) => person.shoot(gun);
------------------------------- static은 static으로된 매개변수가 들어가야하는게 아닌

*동의어 모음
1. 객체 = Object = 인스턴스 = Instance
2. 상속 = Inheritance
3. 조합 = Composition
4. 다형성 = Polymorphism
5. 추상화 = Abstraction
6. 캡슐화 = Encapsulation
7. Runtime에 = Dynamic하게 = 프로그램이 실행되는 도중에
8. Compiletime에 = Static하게 = 프로그램이 실행되기 전에
9. 부모클래스 = Super Class = Parent Class = Base Class
10. 자식클래스 = Sub Class = Derived Class
11. 인터페이스 = Interface
12. 추상클래스 = Concrete Class
13. Tight Coupling = 의존성이 강하다 = dependent 하다 = 독립적 개발 불가능하다
14. Loose Coupling = 의존성이 약하다 = dependent 하지 않다 = 독립적 개발 가능하다

*Design Pattern
1. Creational Pattern : '객체 생성 매커니즘' : 변화에 유연하고, 코드의 재활용성 높음
2. Structural Pattern : '구조 구현 매커니즘' : 변에 유연하고, 코드의 재활용성 높은
3. Behavioral Pattern : 'Client 요청사항, 알고리즘 용이하게 수행 매커니즘'
