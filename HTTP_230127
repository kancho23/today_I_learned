1. HTTP 헤더
- 형태 : field-name + ":" + field-value
- 용도 : 메세지 바디 내용, 크기, 압축 등 여러 정보 들어감
- 분류 : 과거에는 General, Request, Response, Entity 헤더로 구분했다.
         최근에는 Entity 대신 표현(Representation)으로 바뀌었다. 표현 본문(실제 데이터) + 표현 헤더(데이터 유형, 길이 등 정보)
         
표현 헤더 (전송, 응답 둘 다 사용)
- Content Type : 표현 데이터의 형식
- Content Encoding : 표현 데이터의 압축 방식
- Content Language : 표현 데이터의 자연 언어
- Content Length : 표현 데이터의 길이

협상 (요청시에만 사용)
- Accept : 클라이언트가 선호하는 미디어 타입 전달
- Accept Charset : 클라이언트가 선호하는 문자 인코딩
- Accept Encoding : 클라이언트가 선호하는 압축 인코딩
- Accept Language : 클라이언트가 선호하는 자연 언어

*협상과 우선순위
- Quality Values (0~1) : 클수록 높은 우선순위
- Accept : 구체적인 것 우선이다


2. 전송방식
- 단순 전송 : content-length를 알고있을 때
- 압축 전송 : gzip으로 압축해 크기 줄여서 전송
- 분할 전송 : 덩어리로 쪼개서 전송 (content-length 넣으면 안됨)
- 범위 전송 : 필요한 부분만 요청

3. 일반 정보
- From : 유저 에이전트의 이메일 정보
- Referer : 이전 웹 페이지 주소(현재 요청된 페이지의 이전 페이지)
- User Agent : 유저 에이전트 애플리케이션 정보(내 웹브라우저 정보)
- Server : 요청을 처리하는 origin(실제 요청받는 끝 서버) 서버의 소프트웨어 정보
- Date : 메시지가 발생한 날짜와 시간(응답에서만 사용)

4. 특별한 정보
- Host : 호스트, 필수값 (@@ 하나의 서버가 여러 도메인 처리할 때)
- Location : 페이지 경로 변경 (300 상태코드에서 설명함)
- Allow : 허용가능한 HTTP 메서드
- Retry After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간

5. 인증
- Authorization : 클라이언트 인증 정보 서버에 전달
- WWW Authenticate : 리소스 접근 시 필요한 인증 방법 정의

6. 쿠키
- Set Cookie : 서버에서 클라이언트로 쿠키 전달(응답)
- Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP요청시 서버로 전달

*HTTP는 기본적으로 무상태(stateless) 프로토콜이다. 클라이언트와 서버가 요청과 응답을 주고받으면 연결이 끊어지고, 이를 기억하지 못한다.
쿠키를 사용하지 않으면, 모든 요청에 사용자 정보를 포함해야한다. 따라서, 이를 저장하는게 쿠키!
- 세션쿠키 : 만료 날짜를 생략하면, 브라우저 종료시까지만 유지
- 영속쿠키 : 만료 날짜를 입력하면, 해당 날짜까지 유지
- 도메인 명시 : 명시한 문서 기준 도메인 + 서브 도메인 포함해 쿠키 접근 가능
- 도메인 생략 : 현재 문서 기준 도메인만 적용
- 경로 : 이 경로를 포함한 하위 경로 페이지만 쿠키 전달 가능
- Secure : 이걸 설정하면, https에만 전송가능
- HttpOnly : XSS 공격 방지, HTTP 전송에만 사용
- SameSite : XSRF 공격방지, 요청 도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키 전송
