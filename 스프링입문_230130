직접 '회원관리예제'를 개발해보자
1. 비즈니스 요구사항 정리
- 데이터 : 회원 ID, 이름
- 기능 : 회원등록, 조회
- 아직 데이터 저장소가 선정되지 않음
- 일반적인 웹 애플리케이션 도메인을 중심으로, 컨트롤러 -> 서비스 -> 레포지토리 -> DB로 구성
- 회원 서비스는 'MemberService'에, 이걸 저장하는건 'MemberRepository'라는 인터페이스로 구현(데이터 저장소 미선택이므로)

2. 회원 도메인과 리포지토리 만들기
- domain 패키지에 Member라는 class를 만든다. 여기에는 단순히 id, name이라는 객체 + 각각의 get&set을 넣는다
- repository 패키지에 interface로 MemberRepositry를 만든다. 여기에는 단순히 save, optional로 findbyid/findbyname을 넣는다.
*요즘에는 값이 안들어오면 null로 반환하는 optional이라는 기능을 많이 이용한다
- repository 패키지에 MemoryMemberRepository를 만든다. 여기엔 implements MemberRepository를 넣어, 상속받는다
  추가로 저장할 공간이 필요하니 Map<long, member> store = new HashMap<>()
  추가로 0,1,2 이렇게 순서를 넣어줄 sequence = 0L
*실무에서는 공유되는 변수일 경우, 동시성문제가 생길수있어 HashMap이 아닌 ConqureMap을 써야한다
*실무에서는 공유되는 변수일 경우, 동시성문제를 고려해 long형태의 sequence 선언이 아닌, autumn long을 써야한다
- MemoryMemberRepository 함수를 하나씩 보자. 우선 save는 member.setId(++sequence)와 store.put(member.getId(), member)를 슨다
  한명씩 들어올때마다 sequence가 +1되고, 이걸 Id라하겠다. 이것을 member에 put하자
- findbyId를 보자. return Optional.ofNullable(store.get(id))을 쓴다.
  store 선언에서, 일전에 저장한 id를 가져온다. 단, null값이 나올수 있어 optional.ofnullable을 써준다.
- findbyName을 보자. return store.values().stream()
                            .filter(member -> memeber.getName().equals(name))
                            .findAny() 를 쓴다.
  
- findAll을 보자. return new ArrayList<>(store.values())
  위에서 Map<long, member> store라 했으므로, store.values()는 member가 될테고, 이걸 list로 받아서 반환하게된다.
  
3. 회원 리포지토리 테스트 케이스 생성
- 위에서 작성한 도메인이 제대로 동작하는지 확인하기위해 테스트 케이스를 생성한다.
  자바는 'JUnit'이라는 프레임워크로 여러 테스트를 진행하고, 쉽게, 반복적으로 확인할 수 있도록 도와준다.
- test/hello.hellospring/repository에 MemoryMemberRepositoryTeset라는 클래스를 만든다.
  구성은 다음과 같다.
  1. MemberRepository repository = new MemberRepository() //객체선언
  2. @Test annotation + public void save(){Member member = new Member() //객체선언 
                                          + member.setName("spring") 
                                          + repository.save(member) 
                                          //return optional의 값을 꺼내고 싶을땐, get()을 사용하면됨
                                          + Member result = repository.findById(member.getId()).get()}
                                          + Asserions(junit).assertEquals(result, member)}
* 최근에는 Assertions(assertj).assertThat(member).isEqualTo(result)로도 쓸 수 있다. (static으로 변경가능)
  3. @Test annotation + public void findByName(){Member member1 = new Member()
                                          + member1.setName("spring1")
                                          + repository.save(member1)
                                          + Member member2 = new Member()
                                          + member2.setName("spring2")
                                          + repository.save(member2)
                                          //원래 Optional<Member> result = repository.findByName("spring1")으로 써야함 (get사용해 바꿔줌)
                                          + Member result = repository.findByName("spring1").get()
                                          + assertThat(result).isEqualTo(member1)
  4. @Test annotation + public void findAll(){Member member1 = new Member()
                                          + member1.setName("spring1")
                                          + repository.save(member1)
                                          + Member member2 = new Member()
                                          + member2.setName("spring2")
                                          + repository.save(member2)
                                          + List<Member> result = repository.findAll()
                                          + assertThat(result.size()).isEqualTo(2)
* 테스트 케이스마다 선언한 member1, member2와 같은 객체들을 지워줘야한다.
  5. @AfterEach annotation + public void afterEach(){repository.clearStore()}
                           + public void cleaerStore(){store.clear()}

* 우리는 먼저 MemoryMemberRepository를 개발하고, Test case를 작성했다.
이걸 뒤집에서 test case 먼저 구현하고, MemoryMemberRepository를 작성할 수 있다. 이를 Test 주도 개발(TDD)라 한다.

4. 회원 서비스 개발
- 실제 비즈니스 로직을 개발하는 단계이다.
- main에 service라는 package를 만든다. 거기에 MemberService라는 class를 만든다.

5. 회원 서비스 테스트
